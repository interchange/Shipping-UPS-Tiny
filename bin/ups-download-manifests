#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use YAML qw/LoadFile Dump/;
use Shipping::UPS::Tiny::QuantumView;
use Shipping::UPS::Tiny::QuantumView::Response;
use File::Slurp;
use Data::Dumper;
use SQL::Abstract;
use DBI;


my $conf;
my $verbose;
my $help;
my $xmlfile;
GetOptions ('conf=s' => \$conf,
            help => \$help,
            verbose => \$verbose,
            'xmlfile=s' => \$xmlfile,
           );

if ($help) {
    give_help();
    exit;
}

# read the conf

unless ($conf and (-f $conf)) {
    die "Missing configuration file!";
}
my $account = LoadFile($conf);
vprint("Using these credentials: " . Dump($account));

my @dbconf = (delete($account->{dbdsn}),
              delete($account->{dbuser}),
              delete($account->{dbpassword}));

if ($xmlfile) {
    die "$xmlfile is not a file" unless -f $xmlfile;
    process_xml_file($xmlfile, $account->{schemadir});
    exit;
}


my $qv = Shipping::UPS::Tiny::QuantumView->new(%$account);
vprint("Using endpoint " . $qv->endpoint);
my $res = $qv->fetch(unread => 1);
$xmlfile = $qv->xml_path;

# This is ugly, but can't be helped and it's waiting for real data
# from the live server to be properly tested & fixed

if ($qv->endpoint eq 'https://wwwcie.ups.com/ups.app/xml/QVEvents') {
    print "Using the development server!: it's sending bogus data, trying to fix it\n";
    $xmlfile = fix_bogus_data($xmlfile);
    print "Using $xmlfile as response!\n";
}

process_xml_file($xmlfile, $qv->schemadir);

sub process_xml_file {
    my ($file,$schemadir) = @_;
    my $res =
      Shipping::UPS::Tiny::QuantumView::Response->new (response => $file,
                                                       schemadir => $schemadir);
    unless ($res->is_success) {
        die $res->error;
    }

    my $dbh = DBI->connect(@dbconf)
      or die "Couldn't connect to" . join(",", @dbconf);

    foreach my $manifest ($res->qv_manifests) {
        # we wants the packages
        foreach my $pack ($manifest->packages) {
            dbinsert($dbh, $pack);
        }
    }

    foreach my $exc ($res->qv_exceptions) {
        dbinsert($dbh, $exc);
    }

    foreach my $del ($res->qv_deliveries) {
        dbinsert($dbh, $del);
    }
}

sub dbinsert {
    my ($dbh, $obj) = @_;
    my $set = {};
    my $sql = SQL::Abstract->new;
    foreach my $method ($obj->shared_methods) {
        $set->{$method} = $obj->$method;
    }
    vprint (Dumper($set));
    my ($stmt, @bind) = $sql->insert(quantum_view => $set);
    my $sth = $dbh->prepare($stmt);
    $sth->execute(@bind);
}

sub give_help {
    print <<'HELPME';
This script will download the UPS QuantumView data and save them to a database table.

Options:

  --conf <configuration file>
    Mandatory. Path to the configuration file.

  --verbose
    Be verbose.

  --xmlfile Instead of querying the server, process and existing XML file.

  --help
    Print this help

The configuration file should be YAML formatted and should have the
following settings:

xml_save_directory: "/path/to/the/directory"
schemadir: "/path/to/the/ups/schemas"
username: "username"
password: "P4zzWord"
endpoint: "https://onlinetools.ups.com/ups.app/xml/QVEvents"
account_key: "MyPreciousUPSkey"
subscription_name: "ExceptionandDeliver"
dbdsn: "dbi:SQLite:db=t/test.db"
dbuser: ""
dbpass: ""

DB schema:

CREATE TABLE quantum_view(
       subscription_number  VARCHAR(64),
       subscription_name    VARCHAR(64),
       subscription_status  VARCHAR(64),
       subscription_status_desc VARCHAR(255),
       file_status_desc VARCHAR(255),
       file_status      VARCHAR(64),
       file_name        VARCHAR(255),
       source           VARCHAR(64),
       tracking_number  VARCHAR(128),
       latest_activity  DATETIME,
       activity_location VARCHAR(255),
       scheduled_delivery_date DATE,
       destination        VARCHAR(255),
       details            VARCHAR(255),
       pickup_date        DATE);


HELPME
}

sub vprint {
    if ($verbose) {
        print @_, "\n";
    }
}

sub fix_bogus_data {
    my $file = shift;
    my $text = read_file($file);
    $text =~ s{(<Manifest>)\s*(<Shipper>)\s*(<Address>)\s*(<ConsigneeName>(.*?)</ConsigneeName>)}{$1$2<Name>$5</Name>$3}gs;
    $text =~ s{(<DeliveryLocation>\s*)(<Code>.*?</DeliveryLocation>)}{$1<AddressArtifactFormat />$2}gs;
    $file =~ s/\.xml$/-fixed.xml/;
    write_file($file, $text);
    return $file;
}

